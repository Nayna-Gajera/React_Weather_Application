{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","sys","weather","main","temp","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f7a97e6.chunk.js","sourcesContent":["import React from 'react';\n\n\nclass Titles extends React.Component{\n  render(){\n    return(\n      <div>\n          <h1 className=\"title-container__title\"> Weather Finder</h1>\n          <p className=\"title-container__subtitle\">Find out temperature, conditions and more ..</p>\n      </div>\n    ) \n  }\n}\n\nexport default Titles;","import React from 'react';\n\n\nclass Form extends React.Component{\n  render(){\n    return(\n      <form onSubmit = {this.props.getWeather}>\n        <input type=\"text\" name=\"city\" placeholder=\"city...\" />\n        <input type=\"text\" name=\"country\" placeholder=\"country...\" />\n        <button> Get Weather</button>\n      </form>\n    ) \n  }\n}\n\nexport default Form;","import React from 'react';\n\n\nclass Weather extends React.Component{\n  render(){\n    return(\n      <div className=\"weather__info\">\n        {\n          this.props.city && this.props.country && \n          <p className=\"weather__key\"> \n            Location : <span className=\"weather__value\"> {this.props.city} , {this.props.country} </span>\n          </p> \n        }\n        \n        {\n          this.props.temperature && \n          <p className=\"weather__key\"> \n            Temperature : <span className=\"weather__value\"> {this.props.temperature} </span> \n          </p> \n        }\n        {\n          this.props.humidity && \n          <p className=\"weather__key\"> Humidity : \n            <span className=\"weather__value\"> {this.props.humidity} </span> \n          </p> \n        }\n        {\n          this.props.description && \n          <p className=\"weather__key\"> \n            Description : <span className=\"weather__value\">{this.props.description}</span>\n          </p>\n        }\n        {\n          this.props.error && \n          <p className=\"weather__error\"> {this.props.error}</p>\n        }\n      </div>\n    ) \n  }\n}\n\nexport default Weather;","import React from 'react';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = 'd34d0e83ea40705191286d7cc49bac5e';\n\nclass App extends React.Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    description: undefined,\n    temperature: undefined,\n    humidity: undefined,\n    error: undefined,\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`\n    );\n    const data = await api_call.json();\n    console.log(data);\n    if (city && country) {\n      this.setState({\n        city: data.name,\n        country: data.sys.country,\n        description: data.weather[0].description,\n        temperature: data.main.temp,\n        humidity: data.main.humidity,\n        error: '',\n      });\n    } else {\n      this.setState({\n        city: undefined,\n        country: undefined,\n        description: undefined,\n        temperature: undefined,\n        humidity: undefined,\n        error: 'Please enter the value..',\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    weather={this.state.weather}\n                    humidity={this.state.humidity}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}